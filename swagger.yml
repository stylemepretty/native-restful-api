swagger: '2.0'

info:
  version: "0.0.1"
  title: SMP Native REST API
  contact:
      email: "adam@stylemepretty.com"

host: 10.98.192.9
produces:
  - application/json

tags:
    -
      name: gallery
      description: Api routes involving a single gallery or collection of galleries
    -
      name: image
      description: Api routes involving a single image or collection of images
    -
      name: user
      description: Api routes involving user actions

paths:
  /api/v2/galleries:
    get:
      tags:
          - gallery
      summary: Get `Preview` objects matching queried `Vendor` and `Detail` parameters
      operationId: getFeedGalleries
      consumes:
        - application/json
      parameters:
        -
          name: perPage
          in: query
          description: Maximum number of `GalleryPreview` objects
          required: false
          type: integer
        -
          name: last
          in: query
          description: Query `GalleryPreview` objects with an id older than parameter
          required: false
          type: integer
        -
          name: vendor
          in: query
          description: Query `GalleryPreview` objects matching a `Vendor` id
          required: false
          type: string
        -
          name: detail
          in: query
          description: Query `GalleryPreview` objects matching a `Detail` id
          required: false
          type: string
      responses:
        200:
          description: Successful response
          schema:
             $ref: '#/definitions/Galleries'
        500:
          description: Failed response
          schema:
             $ref: '#/definitions/Error'

  /api/v2/gallery:
    get:
      tags:
        - gallery
      responses:
        200:
          description: Successful response
          schema:
             $ref: '#/definitions/Gallery'
        500:
          description: Failed response
          schema:
             $ref: '#/definitions/Error'

  /api/v2/image:
    get:
      tags:
        - image
      summary: Get `Image` metdata
      operationId: getImageMetadata
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: query
          description: Id of `Image` object to query
          required: true
          type: integer

      responses:
        200:
          description: Successful response
          schema:
             $ref: '#/definitions/Image'
        500:
          description: Failed response
          schema:
             $ref: '#/definitions/Error'

  /api/v2/following:
    post:
      tags:
        - user
      parameters:
        -
          name: Authorization
          in: header
          description: Authorization token
          required: true
          type: string
      summary: Returns all `Object` objects the current user is following
      responses:
        200:
          description: Successful response
          schema:
             $ref: '#/definitions/Following'
        403:
          description: Unauthorized response
          schema:
             $ref: '#/definitions/Error'
        500:
          description: Failed response
          schema:
             $ref: '#/definitions/Error'

  /api/v2/follow:
    post:
      tags:
        - user
      parameters:
        -
          name: Authorization
          in: header
          description: Authorization token
          required: true
          type: string
        -
          name: taxonomy
          in: query
          description: type of object to follow, can be "detail" or "vendor"
          required: true
          type: string
        -
          name: id
          in: query
          description: Id of `Detail` object or `Vendor` object
          required: true
          type: integer
      summary: Allow users to follow a `Object` which can be either a detail or vendor
      responses:
        200:
          description: Successful response
          schema:
             $ref: '#/definitions/Following'
        403:
          description: Unauthorized response
          schema:
             $ref: '#/definitions/Error'
        500:
          description: Failed response
          schema:
             $ref: '#/definitions/Error'

  /api/v2/unfollow:
    post:
      tags:
        - user
      parameters:
        -
          name: Authorization
          in: header
          description: Authorization token
          required: true
          type: string
        -
          name: taxonomy
          in: query
          description: type of object to unfollowing, can be "detail" or "vendor"
          required: true
          type: string
        -
          name: id
          in: query
          description: Id of `Detail` object or `Vendor` object
          required: true
          type: integer
      summary: Unfollow a `Object`
      responses:
        200:
          description: Successful response
          schema:
             $ref: '#/definitions/Following'
        403:
          description: Unauthorized response
          schema:
             $ref: '#/definitions/Error'
        500:
          description: Failed response
          schema:
             $ref: '#/definitions/Error'

  /wp-json/wp/v2/users:
    post:
      tags:
          - user
      summary: Create a new user
      operationId: createUser
      schemes:
        - http
        - https
      parameters:
        -
          name: username
          in: formData
          required: true
          type: string
        -
          name: email
          in: formData
          required: true
          type: string
        -
          name: password
          in: formData
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
             $ref: '#/definitions/User'
        403:
          description: Failed response
          schema:
             $ref: '#/definitions/Error'

  /wp-json/jwt-auth/v1/token:
    post:
      tags:
          - user
      summary: Request access token
      operationId: getToken
      schemes:
        - http
        - https
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        -
          name: username
          in: formData
          required: true
          type: string
        -
          name: password
          in: formData
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
             type: object
             properties:
              token:
                type: string
                description: Authorization token
              user_email:
                type: string
              user_nicename:
                type: string
              user_display_name:
                type: string
        403:
          description: Failed authentication
          schema:
             $ref: '#/definitions/Error'

  /wp-json/jwt-auth/v1/token/validate:
    post:
      tags:
          - user
      summary: Validates a access token
      operationId: validateToken
      schemes:
        - http
        - https
      parameters:
        -
          name: Authorization
          in: header
          description: Authorization token
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
             type: object
             properties:
              code:
                type: string
                description: If valid code will be set to jwt_auth_valid_token
        403:
          description: Invalid token
          schema:
             $ref: '#/definitions/Error'

 #/api/following - get things a user is following
 #/api/user
 #/api/user/favorites
 #/api/user/favorites/search - likely have to handle this internally (can't sent to algolia)
#/api/recommendFollows  - this should take a user id so we can personalize
#/api/search/popular
#/api/search/recent - per user basis?
#for doing searches do we send to algolia directly

definitions:
  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string

  User:
    type: object
    properties:
      id:
        type: integer
      username:
        type: string
      email:
        type: string

  Following:
    type: array
    items:
      $ref: '#/definitions/Object'

  Object:
    type: object
    properties:
      id:
        type: integer
      taxonomy:
        type: string

  #use allOf for composition if possible.
  Image:
    type: object
    properties:
      id:
        type: integer
      path:
        type: string
        description: Path to image source.
      width:
        type: integer
        description: Width of image.
      height:
        type: integer
        description: Height of image.
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      vendors:
        type: array
        items:
          $ref: '#/definitions/Vendor'

  Galleries:
    type: object
    properties:
      total:
        type: integer
        description: Total `Gallery` objects matching query
      last:
        type: integer
        description: The `Gallery` object ID matching request parameter or null
      perPage:
        type: integer
        description: Integer matching perPage request parameter or default value
      results:
        type: array
        items:
          $ref: '#/definitions/GalleryPreview'

#Trying to use composition with allOf this seemed to break stuff.
  Gallery:
    description: full gallery object
    type: object
    properties:
      id:
        type: integer
      title:
        type: string
        description: title of gallery
      background:
        type: string
        description: Main image.
      thumbs:
        type: array
        items:
          type: string
          description: URL of thumbs
      post_url:
        type: string
        description: URL of associated post.
      details:
        type: array
        items:
          $ref: '#/definitions/Detail'
      vendors:
        type: array
        items:
          $ref: '#/definitions/Vendor'
      images:
        type: array
        items:
          $ref: '#/definitions/ImagePreview'

  GalleryPreview:
    type: object
    properties:
      id:
        type: integer
      title:
        type: string
        description: title of gallery
      background:
        type: string
        description: Main image.
      thumbs:
        type: array
        items:
          type: string
          description: URL of thumbs
  #Note: add recomended here?

  ImagePreview:
    type: object
    properties:
      id:
        type: integer
      path:
        type: string
        description: Path to image source.
      width:
        type: integer
        description: Width of image.
      height:
        type: integer
        description: Height of image.

  Tag:
    type: object
    description: image level tag
    properties:
      id:
        type: integer
      name:
        type: string
        description: human readable tag name

#Detail and Vendor are loosely abstracted to "terms".  Can to followable?
  Detail:
    type: object
    description: gallery level "tags".
    properties:
      id:
        type: integer
      name:
        type: string
        description: name of detail
      taxonomy:
        type: string
        description: slug used to find galleries

  Vendor:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
        description: Name of vendor
        
